{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  shelters: [],\n  selectedShelter: null,\n  isLoading: false,\n  error: null\n};\nconst sheltersSlice = createSlice({\n  name: 'shelters',\n  initialState,\n  reducers: {\n    fetchSheltersStart: state => {\n      state.isLoading = true;\n      state.error = null;\n    },\n    fetchSheltersSuccess: (state, action) => {\n      state.isLoading = false;\n      state.shelters = action.payload;\n    },\n    fetchSheltersFailure: (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n    setSelectedShelter: (state, action) => {\n      state.selectedShelter = action.payload;\n    },\n    updateShelterCapacity: (state, action) => {\n      var _state$selectedShelte;\n      const shelter = state.shelters.find(s => s.id === action.payload.shelterId);\n      if (shelter) {\n        shelter.currentPets = action.payload.currentPets;\n      }\n      if (((_state$selectedShelte = state.selectedShelter) === null || _state$selectedShelte === void 0 ? void 0 : _state$selectedShelte.id) === action.payload.shelterId) {\n        state.selectedShelter.currentPets = action.payload.currentPets;\n      }\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  fetchSheltersStart,\n  fetchSheltersSuccess,\n  fetchSheltersFailure,\n  setSelectedShelter,\n  updateShelterCapacity,\n  clearError\n} = sheltersSlice.actions;\nexport default sheltersSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","shelters","selectedShelter","isLoading","error","sheltersSlice","name","reducers","fetchSheltersStart","state","fetchSheltersSuccess","action","payload","fetchSheltersFailure","setSelectedShelter","updateShelterCapacity","_state$selectedShelte","shelter","find","s","id","shelterId","currentPets","clearError","actions","reducer"],"sources":["C:/Users/David/try/pet-adoption-platform/frontend/src/store/slices/sheltersSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Shelter {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  phone: string;\r\n  email: string;\r\n  description: string;\r\n  imageUrl: string;\r\n  capacity: number;\r\n  currentPets: number;\r\n}\r\n\r\ninterface SheltersState {\r\n  shelters: Shelter[];\r\n  selectedShelter: Shelter | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: SheltersState = {\r\n  shelters: [],\r\n  selectedShelter: null,\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst sheltersSlice = createSlice({\r\n  name: 'shelters',\r\n  initialState,\r\n  reducers: {\r\n    fetchSheltersStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchSheltersSuccess: (state, action: PayloadAction<Shelter[]>) => {\r\n      state.isLoading = false;\r\n      state.shelters = action.payload;\r\n    },\r\n    fetchSheltersFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    setSelectedShelter: (state, action: PayloadAction<Shelter | null>) => {\r\n      state.selectedShelter = action.payload;\r\n    },\r\n    updateShelterCapacity: (\r\n      state,\r\n      action: PayloadAction<{ shelterId: string; currentPets: number }>\r\n    ) => {\r\n      const shelter = state.shelters.find((s) => s.id === action.payload.shelterId);\r\n      if (shelter) {\r\n        shelter.currentPets = action.payload.currentPets;\r\n      }\r\n      if (state.selectedShelter?.id === action.payload.shelterId) {\r\n        state.selectedShelter.currentPets = action.payload.currentPets;\r\n      }\r\n    },\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  fetchSheltersStart,\r\n  fetchSheltersSuccess,\r\n  fetchSheltersFailure,\r\n  setSelectedShelter,\r\n  updateShelterCapacity,\r\n  clearError,\r\n} = sheltersSlice.actions;\r\n\r\nexport default sheltersSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAqB7D,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE,EAAE;EACZC,eAAe,EAAE,IAAI;EACrBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,UAAU;EAChBN,YAAY;EACZO,QAAQ,EAAE;IACRC,kBAAkB,EAAGC,KAAK,IAAK;MAC7BA,KAAK,CAACN,SAAS,GAAG,IAAI;MACtBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACDM,oBAAoB,EAAEA,CAACD,KAAK,EAAEE,MAAgC,KAAK;MACjEF,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACR,QAAQ,GAAGU,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,oBAAoB,EAAEA,CAACJ,KAAK,EAAEE,MAA6B,KAAK;MAC9DF,KAAK,CAACN,SAAS,GAAG,KAAK;MACvBM,KAAK,CAACL,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,kBAAkB,EAAEA,CAACL,KAAK,EAAEE,MAAqC,KAAK;MACpEF,KAAK,CAACP,eAAe,GAAGS,MAAM,CAACC,OAAO;IACxC,CAAC;IACDG,qBAAqB,EAAEA,CACrBN,KAAK,EACLE,MAAiE,KAC9D;MAAA,IAAAK,qBAAA;MACH,MAAMC,OAAO,GAAGR,KAAK,CAACR,QAAQ,CAACiB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKT,MAAM,CAACC,OAAO,CAACS,SAAS,CAAC;MAC7E,IAAIJ,OAAO,EAAE;QACXA,OAAO,CAACK,WAAW,GAAGX,MAAM,CAACC,OAAO,CAACU,WAAW;MAClD;MACA,IAAI,EAAAN,qBAAA,GAAAP,KAAK,CAACP,eAAe,cAAAc,qBAAA,uBAArBA,qBAAA,CAAuBI,EAAE,MAAKT,MAAM,CAACC,OAAO,CAACS,SAAS,EAAE;QAC1DZ,KAAK,CAACP,eAAe,CAACoB,WAAW,GAAGX,MAAM,CAACC,OAAO,CAACU,WAAW;MAChE;IACF,CAAC;IACDC,UAAU,EAAGd,KAAK,IAAK;MACrBA,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXI,kBAAkB;EAClBE,oBAAoB;EACpBG,oBAAoB;EACpBC,kBAAkB;EAClBC,qBAAqB;EACrBQ;AACF,CAAC,GAAGlB,aAAa,CAACmB,OAAO;AAEzB,eAAenB,aAAa,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}