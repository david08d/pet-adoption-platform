{"ast":null,"code":"// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// interface User {\n//   id: string;\n//   email: string;\n//   name: string;\n// }\n\n// interface AuthState {\n//   user: User | null;\n//   token: string | null;\n//   isAuthenticated: boolean;\n//   isLoading: boolean;\n//   error: string | null;\n// }\n\n// const initialState: AuthState = {\n//   user: null,\n//   token: localStorage.getItem('token'),\n//   isAuthenticated: false,\n//   isLoading: false,\n//   error: null,\n// };\n\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   reducers: {\n//     loginStart: (state) => {\n//       state.isLoading = true;\n//       state.error = null;\n//     },\n//     loginSuccess: (state, action: PayloadAction<{ user: User; token: string }>) => {\n//       state.isLoading = false;\n//       state.isAuthenticated = true;\n//       state.user = action.payload.user;\n//       state.token = action.payload.token;\n//       localStorage.setItem('token', action.payload.token);\n//     },\n//     loginFailure: (state, action: PayloadAction<string>) => {\n//       state.isLoading = false;\n//       state.error = action.payload;\n//     },\n//     logout: (state) => {\n//       state.user = null;\n//       state.token = null;\n//       state.isAuthenticated = false;\n//       localStorage.removeItem('token');\n//     },\n//     clearError: (state) => {\n//       state.error = null;\n//     },\n//   },\n// });\n\n// export const {\n//   loginStart,\n//   loginSuccess,\n//   loginFailure,\n//   logout,\n//   clearError,\n// } = authSlice.actions;\n\n// export default authSlice.reducer; \n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;\n// Додаємо експорт типу","map":{"version":3,"names":["createSlice","initialState","user","token","isAuthenticated","authSlice","name","reducers","login","state","action","payload","logout","actions","reducer"],"sources":["C:/Users/David/try/pet-adoption-platform/frontend/src/store/slices/authSlice.ts"],"sourcesContent":["// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// interface User {\r\n//   id: string;\r\n//   email: string;\r\n//   name: string;\r\n// }\r\n\r\n// interface AuthState {\r\n//   user: User | null;\r\n//   token: string | null;\r\n//   isAuthenticated: boolean;\r\n//   isLoading: boolean;\r\n//   error: string | null;\r\n// }\r\n\r\n// const initialState: AuthState = {\r\n//   user: null,\r\n//   token: localStorage.getItem('token'),\r\n//   isAuthenticated: false,\r\n//   isLoading: false,\r\n//   error: null,\r\n// };\r\n\r\n// const authSlice = createSlice({\r\n//   name: 'auth',\r\n//   initialState,\r\n//   reducers: {\r\n//     loginStart: (state) => {\r\n//       state.isLoading = true;\r\n//       state.error = null;\r\n//     },\r\n//     loginSuccess: (state, action: PayloadAction<{ user: User; token: string }>) => {\r\n//       state.isLoading = false;\r\n//       state.isAuthenticated = true;\r\n//       state.user = action.payload.user;\r\n//       state.token = action.payload.token;\r\n//       localStorage.setItem('token', action.payload.token);\r\n//     },\r\n//     loginFailure: (state, action: PayloadAction<string>) => {\r\n//       state.isLoading = false;\r\n//       state.error = action.payload;\r\n//     },\r\n//     logout: (state) => {\r\n//       state.user = null;\r\n//       state.token = null;\r\n//       state.isAuthenticated = false;\r\n//       localStorage.removeItem('token');\r\n//     },\r\n//     clearError: (state) => {\r\n//       state.error = null;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const {\r\n//   loginStart,\r\n//   loginSuccess,\r\n//   loginFailure,\r\n//   logout,\r\n//   clearError,\r\n// } = authSlice.actions;\r\n\r\n// export default authSlice.reducer; \r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface AuthState {\r\n  user: string | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    login: (state, action: PayloadAction<{ user: string; token: string }>) => {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.token = null;\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = authSlice.actions;\r\nexport default authSlice.reducer;\r\nexport type { AuthState }; // Додаємо експорт типу\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,WAAW,QAAuB,kBAAkB;AAQ7D,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC5BM,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACRC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAsD,KAAK;MACxED,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACC,OAAO,CAACT,IAAI;MAChCO,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO,CAACR,KAAK;MAClCM,KAAK,CAACL,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDQ,MAAM,EAAGH,KAAK,IAAK;MACjBA,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;MAClBM,KAAK,CAACL,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,KAAK;EAAEI;AAAO,CAAC,GAAGP,SAAS,CAACQ,OAAO;AAClD,eAAeR,SAAS,CAACS,OAAO;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}